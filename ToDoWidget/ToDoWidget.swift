/*
 Ã‡alÄ±ÅŸtÄ±rÄ±rken Ã¶nce ana uygulamaya geÃ§ip Ã¼stten Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r gelir durdurulur sonra extensiona geÃ§ip Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r widget eklenmiÅŸtir basÄ±lÄ± tutup silinir ardÄ±ndna boÅŸ ekrana basÄ±lÄ± tut Ã¼st + dan uygulama IntegractiveWidgetKit Ã§Ä±kar seÃ§ilir seÃ§ersin istediÄŸini vs....
 -Ã¼stÃ¼ne tÄ±kladÄ±ÄŸÄ±nda aÃ§Ä±lÄ±r
 -butonlara tÄ±klayÄ±nca iÅŸaretler .
 */

import WidgetKit
import SwiftUI

struct Provider: TimelineProvider {
    //widget gelmeden ne gÃ¶sterilcek olan yer
    func placeholder(in context: Context) -> ToDoEntry {
        //        ToDoEntry(date: Date(), emoji: "ğŸ˜€")
        //normalde tabiki time line veri verilirde kÃ¼Ã§Ã¼k olduÄŸu iÃ§in burda verdik sorun yapmaz
        //no datada yazdÄ±rabiliri // data loading teyazdÄ±rabiliriz
        //prefix o kutucuÄŸa en fazla 3 adet sÄ±ÄŸcaÄŸÄ±nÄ± belirttik
        ToDoEntry(toDoDisplay: Array(SharedDates.shared.toDos.prefix(3)))
    }
    
    func getSnapshot(in context: Context, completion: @escaping (ToDoEntry) -> ()) {
        //        let entry = ToDoEntry(date: Date(), emoji: "ğŸ˜€")
        let entry = ToDoEntry(toDoDisplay: Array(SharedDates.shared.toDos.prefix(3)))
        completion(entry)
    }
    
    //zamana gÃ¶re deÄŸiÅŸiklikte yapÄ±lcak olan iÅŸlemler diyebiliriz
    func getTimeline(in context: Context, completion: @escaping (Timeline<Entry>) -> ()) {
        //        var entries: [ToDoEntry] = []
        //
        //        // Generate a timeline consisting of five entries an hour apart, starting from the current date.
        //        let currentDate = Date()
        //        for hourOffset in 0 ..< 5 {
        //            let entryDate = Calendar.current.date(byAdding: .hour, value: hourOffset, to: currentDate)!
        //            let entry = ToDoEntry(date: entryDate, emoji: "ğŸ˜€")
        //            entries.append(entry)
        //        }
        
        //veri Ã§ekilcekse gÃ¼ncelleme vs olucaksa basÄ±l burda olur
        
        let toDisplay =  Array(SharedDates.shared.toDos.prefix(3))
        let timeline = Timeline(entries: [ToDoEntry(toDoDisplay: toDisplay)], policy: .atEnd)
        completion(timeline)
    }
}

//widgetin iÃ§inde bulunacak modelin Ã¶zelliklerini aldÄ±ÄŸÄ± yer
struct ToDoEntry: TimelineEntry {
    //    let date: Date
    let date: Date = .now
    //    let emoji: String
    //gÃ¶sterilcek olan todolar diye liste aÃ§Ä±caz
    //ToDo burda gÃ¶rmedi ondna dolayÄ± ayrÄ± modÃ¼ller(klasÃ¶rler) de olduÄŸu iÃ§in ToDo ya gidip saÄŸ taraftaki Ã¶zelliklerinden Show the File Ä°nspector dan -> Target MembersShip ten ÅŸuan olduÄŸun ToDoWidgetExtension iÅŸaretmek gerekli ki gÃ¶rÃ¼nsÃ¼n
    var toDoDisplay : [ToDo]
}

//widget kendisiburda
struct ToDoWidgetEntryView : View {
    var entry: Provider.Entry
    
    var body: some View {
        VStack {
            //            Text("Time:")
            //            Text(entry.date, style: .time)
            //
            //            Text("Emoji:")
            //            Text(entry.emoji)
            
            Text("ToDo Items")
                .fontWeight(.bold)
                .padding(.bottom,5)
            VStack {
                //veri yoksa bÃ¶yle yazar gibi
                if entry.toDoDisplay.isEmpty {
                    Text("ToDos Completed")
                }else{
                    ForEach(entry.toDoDisplay){toDo in
                        HStack {
                            //CompleteToDoIntent gÃ¶rmesse Target MembersShip ten  iÅŸaretlenmesi lazÄ±m
                            Button(intent: CompleteToDoIntent(id: toDo.id)) {
                            
                                //toDo.isDone true ise checkmark.circle.fiil iÃ§ine check atÄ±cak deÄŸilse circle ile boÅŸ olucak
                        
                                Image(systemName: toDo.isDone ? "checkmark.circle.fill" : "circle")
                                //simgesi rengi deÄŸiÅŸti
                                    .foregroundStyle(.blue)
                                //.buttonStyle(.plain) normal hale geldi resimdiya farklÄ± button sitilleride var
                            }.buttonStyle(.plain)
                           
                            //alignment : .leading ile textlerin sola yaslÄ± olmasÄ±nÄ± saÄŸlarÄ±z
                            VStack (alignment : .leading) {
                                //lineLimit yapÄ±lcak iÅŸin en fazla 1satÄ±r olcaÄŸÄ±nÄ± belirtir
                                Text(toDo.name).lineLimit(1)
                                //.textScale(.secondary) olabildiÄŸince kÃ¼Ã§Ã¼k yazdÄ±rÄ±r
                                    .textScale(.secondary)
                                //tÄ±klandÄ±ÄŸÄ±nda Ã¼stÃ¼nÃ¼ Ã§izmek  strikethrough() bu direk Ã¼stÃ¼ne Ã§izer yada  strikethrough(toDo.isDone) ile true ise Ã¼stÃ¼ne Ã§izer
                                //pattern Ã§izgi tipi belirleyebiliriz // color Ã§izgi renginide verebiliri
                                    .strikethrough(toDo.isDone,pattern: .solid,color: .primary)
                                //Divider() iletext lerin  aralarÄ±na Ã§izgi Ã§ektik
                                Divider()
                            }
                        }
                    }
                }
            }
        }
    }
}

struct ToDoWidget: Widget {
    let kind: String = "ToDoWidget"
    
    var body: some WidgetConfiguration {
        StaticConfiguration(kind: kind, provider: Provider()) { entry in
            if #available(iOS 17.0, *) {
                ToDoWidgetEntryView(entry: entry)
                    .containerBackground(.fill.tertiary, for: .widget)
            } else {
                ToDoWidgetEntryView(entry: entry)
                    .padding()
                    .background()
            }
        }
        //adÄ±
        .configurationDisplayName("ToDo Widget")
        //aÃ§Ä±klamasÄ±
        .description("ToDo Widget with Interactions.")
    }
}

#Preview(as: .systemSmall) {
    ToDoWidget()
} timeline: {
    //    ToDoEntry(date: .now, emoji: "1ğŸ˜€")
    //    ToDoEntry(date: .now, emoji: "2ğŸ¤©")
    ToDoEntry(toDoDisplay: Array(SharedDates.shared.toDos.prefix(3)))
    //reversed sÄ±ralamasÄ± ters yaptÄ±k
    ToDoEntry(toDoDisplay: Array(SharedDates.shared.toDos.reversed().prefix(3)))
}

//similasyonun hemen altÄ±nda Entry1 ve Entry2 tÄ±klayarak geÃ§iÅŸ saplayabiliriz ve deÄŸiÅŸtiÄŸini gÃ¶rebiliriz


